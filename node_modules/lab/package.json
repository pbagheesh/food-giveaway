{
  "_args": [
    [
      {
        "raw": "lab@13.x.x",
        "scope": null,
        "escapedName": "lab",
        "name": "lab",
        "rawSpec": "13.x.x",
        "spec": ">=13.0.0 <14.0.0",
        "type": "range"
      },
      "/Users/prashant/Documents/Projects/pal/boilerplate-api"
    ]
  ],
  "_from": "lab@>=13.0.0 <14.0.0",
  "_id": "lab@13.1.0",
  "_inCache": true,
  "_location": "/lab",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/lab-13.1.0.tgz_1494964982813_0.9411199046298862"
  },
  "_npmUser": {
    "name": "wyatt",
    "email": "wpreul@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lab@13.x.x",
    "scope": null,
    "escapedName": "lab",
    "name": "lab",
    "rawSpec": "13.x.x",
    "spec": ">=13.0.0 <14.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/lab/-/lab-13.1.0.tgz",
  "_shasum": "983e657d0a2f0f3d626d806ff8e02b2bcf60a0f6",
  "_shrinkwrap": null,
  "_spec": "lab@13.x.x",
  "_where": "/Users/prashant/Documents/Projects/pal/boilerplate-api",
  "bin": {
    "lab": "./bin/lab"
  },
  "bugs": {
    "url": "https://github.com/hapijs/lab/issues"
  },
  "contributors": [
    {
      "name": "Eran Hammer",
      "email": "eran@hammer.io",
      "url": "http://hueniverse.com"
    },
    {
      "name": "Wyatt Preul",
      "email": "wpreul@gmail.com",
      "url": "http://jsgeek.com"
    }
  ],
  "dependencies": {
    "bossy": "3.x.x",
    "diff": "3.x.x",
    "eslint": "3.19.x",
    "eslint-config-hapi": "10.x.x",
    "eslint-plugin-hapi": "4.x.x",
    "espree": "3.4.x",
    "find-rc": "3.0.x",
    "handlebars": "4.x.x",
    "hoek": "4.x.x",
    "items": "2.x.x",
    "json-stable-stringify": "1.x.x",
    "json-stringify-safe": "5.x.x",
    "mkdirp": "0.5.x",
    "seedrandom": "2.4.x",
    "source-map": "0.5.x",
    "source-map-support": "0.4.x"
  },
  "description": "Test utility",
  "devDependencies": {
    "code": "4.x.x",
    "cpr": "2.0.x",
    "eslint-plugin-markdown": "1.0.0-beta.6",
    "lab-event-reporter": "1.x.x",
    "rimraf": "2.6.x"
  },
  "directories": {},
  "dist": {
    "shasum": "983e657d0a2f0f3d626d806ff8e02b2bcf60a0f6",
    "tarball": "https://registry.npmjs.org/lab/-/lab-13.1.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "6e920a8a2dbc435ff99d2932451724092792d04d",
  "homepage": "https://github.com/hapijs/lab#readme",
  "keywords": [
    "test"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hammer.io"
    },
    {
      "name": "marsup",
      "email": "nicolas@morel.io"
    },
    {
      "name": "nlf",
      "email": "quitlahok@gmail.com"
    },
    {
      "name": "wyatt",
      "email": "wpreul@gmail.com"
    }
  ],
  "name": "lab",
  "optionalDependencies": {},
  "readme": "![lab Logo](https://raw.github.com/hapijs/lab/master/images/lab.png)\n\nNode test utility\n\n[![Build Status](https://secure.travis-ci.org/hapijs/lab.svg)](http://travis-ci.org/hapijs/lab)\n\nLead Maintainer: [Wyatt Preul](https://github.com/geek)\n\n**lab** is sponsored by [Joyent](http://www.joyent.com/). [Joyent](http://www.joyent.com) is currently looking for a [Node.js core engineer](https://www.joyent.com/about/careers/nodejs-core-engineer) to hire.\n\n## Introduction\n\n**lab** is a simple test utility for node. Unlike other test utilities, lab uses domains instead of uncaught exception and other\nglobal manipulation. Our goal with **lab** is to keep the execution engine as simple as possible, and not try to build an extensible framework.\n**lab** works with any assertion library that throws an error when a condition isn't met.\n\n## Command Line\n\n**lab** supports the following command line options:\n- `-a`, `--assert` - name of assert library to use.\n- `--bail` - terminate the process with a non-zero exit code on the first test failure. Defaults to `false`.\n- `-c`, `--coverage` - enables code coverage analysis.\n- `--coverage-path` - sets code coverage path.\n- `--coverage-exclude` - sets code coverage excludes.\n- `-C`, `--colors` - enables or disables color output. Defaults to console capabilities.\n- `-d`, `--dry` - dry run. Skips all tests. Use with `-v` to generate a test catalog. Defaults to `false`.\n- `-D`, `--debug` - print the stack during a domain error event.\n- `-e`, `--environment` - value to set the `NODE_ENV` environment variable to, defaults to 'test'.\n- `-f`, `--flat` - do not perform a recursive load of test files within the test directory.\n- `-g`, `--grep` - only run tests matching the given pattern which is internally compiled to a RegExp.\n- `-h`, `--help` - show command line usage.\n- `-i`, `--id` - only run the test for the given identifier (or identifiers range).\n- `-I`, `--ignore` - ignore a list of globals for the leak detection (comma separated)\n- `--inspect` - start lab in debug mode using the [V8 Inspector](https://nodejs.org/dist/latest-v7.x/docs/api/debugger.html#debugger_v8_inspector_integration_for_node_js).\n- `-l`, `--leaks` - disables global variable leak detection.\n- `-L`, `--lint` - run linting rules using linter.  Disabled by default.\n- `--lint-errors-threshold` - maximum absolute amount of linting errors. Defaults to 0.\n- `--lint-warnings-threshold` - maximum absolute amount of linting warnings. Defaults to 0.\n- `-m`, `--timeout` - individual tests timeout in milliseconds (zero disables timeout). Defaults to 2 seconds.\n- `-M`, `--context-timeout` - default timeouts for before, after, beforeEach and afterEach in milliseconds. Disabled by default.\n- `-n`, `--linter` - specify linting program file path; default is `eslint`.\n- `--lint-fix` - apply any fixes from the linter, requires `-L` or `--lint` to be enabled. Disabled by default.\n- `--lint-options` - specify options to pass to linting program. It must be a string that is JSON.parse(able).\n- `-o`, `--output` - file to write the report to, otherwise sent to stdout.\n- `-p`, `--parallel` - sets parallel execution as default test option. Defaults to serial execution.\n- `-P`, `--pattern` - only load files with the given pattern in the name.\n- `-r`, `--reporter` - the reporter used to generate the test results. Defaults to `console`. Options are:\n    - `console` - text report.\n    - `html` - HTML test and code coverage report (sets `-c`).\n    - `json` - output results in JSON format.\n    - `junit` - output results in JUnit XML format.\n    - `tap` - TAP protocol report.\n    - `lcov` - output to [lcov](http://ltp.sourceforge.net/coverage/lcov/geninfo.1.php) format.\n    - `clover` - output results in [Clover XML](https://confluence.atlassian.com/display/CLOVER) format.\n    - [Multiple Reporters](#multiple-reporters) - See Below\n    - [Custom Reporters](#custom-reporters) - See Below\n- `-R`, `--rejections` - fail tests on unhandled Promise rejections.\n- `--shuffle` - randomize the order that test scripts are executed.  Will not work with `--id`.\n- `--seed` - use this seed to randomize the order with `--shuffle`. This is useful to debug order dependent test failures.\n- `-s`, `--silence` - silence test output, defaults to false.\n- `-S`, `--sourcemaps` - enables sourcemap support for stack traces and code coverage, disabled by default.\n- `-t`, `--threshold` - sets the minimum code test coverage percentage to 100%.\n- `-T`, `--transform` - javascript file that exports an array of objects ie. `[ { ext: \".js\", transform: (content, filename) => { ... } } ]`. Note that if you use this option with -c (--coverage), then you must generate sourcemaps and pass sourcemaps option to get proper line numbers.\n- `-v`, `--verbose` - verbose test output, defaults to false.\n- `-V`, `--version` - display lab version information.\n\n## Usage\n\nTo install locally:\n```bash\n$ npm install --save-dev lab\n```\n\nBy default, **lab** loads all the '\\*.js' files inside the local 'test' directory and executes the tests found.  To use different directories or files, pass the file or directories as arguments:\n\n```bash\n$ lab unit.js\n```\n\nTest files must require the **lab** module, and export a test script:\n```javascript\nconst Code = require('code');   // assertion library\nconst Lab = require('lab');\nconst lab = exports.lab = Lab.script();\n\nlab.test('returns true when 1 + 1 equals 2', (done) => {\n\n    Code.expect(1 + 1).to.equal(2);\n    done();\n});\n```\n\nWhen a test is completed, `done(err)` must be called, otherwise the test will time out (2 seconds by default) and will fail.\nThe test passes if `done()` is called once before the timeout, no exception thrown, and no arguments are passed to `done()`.\nIf no callback function is provided, the test is considered a TODO reminder and will be skipped.\n\nTests can be organized into experiments:\n```javascript\nlab.experiment('math', () => {\n\n    lab.test('returns true when 1 + 1 equals 2', (done) => {\n\n        Code.expect(1 + 1).to.equal(2);\n        done();\n    });\n});\n```\n\nIf you need to perform some async actions before or after executing the tests inside an experiment, the `before()` and\n`after()` methods can be used. To execute code before or after each test in an experiment, use `beforeEach()` and `afterEach()`.\n\n```javascript\nlab.experiment('math', () => {\n\n    lab.before((done) => {\n\n        // Wait 1 second\n        setTimeout(() => {\n\n            done();\n        }, 1000);\n    });\n\n    lab.beforeEach((done) => {\n\n        // Run before every single test\n        done();\n    });\n\n    lab.test('returns true when 1 + 1 equals 2', (done) => {\n\n        Code.expect(1 + 1).to.equal(2);\n        done();\n    });\n});\n\n```\n\n`test()`, `before()`, `beforeEach()`, `after()` and `afterEach()` also support returning promises instead of using the `done` callback:\n\n```javascript\nlab.experiment('math', () => {\n\n    lab.before(() => {\n\n        const promise = aFunctionReturningAPromise();\n\n        return promise;\n    });\n\n    lab.test('returns true when 1 + 1 equals 2', () => {\n\n        return aFunctionReturningAPromise()\n            .then((aValue) => {\n\n                Code.expect(aValue).to.equal(expectedValue);\n            });\n    });\n});\n```\n\nBoth `test()` and `experiment()` accept an optional `options` argument which must be an object with the following optional keys:\n- `timeout` -  set a test or experiment specific timeout in milliseconds. Defaults to the global timeout (`2000`ms or the value of `-m`).\n- `parallel` - sets parallel execution of tests within each experiment level. Defaults to `false` (serial execution).\n- `skip` - skip execution. Cannot be overridden in children once parent is set to skip.\n- `only` - marks all other tests or experiments with `skip`.\n\nYou can also append `.only(…)` or `.skip(…)` to `test` and `experiment` instead of using the `options` flags:\n\n```javascript\nlab.experiment('with only', () => {\n\n    lab.test.only('only this test will run', (done) => {\n\n        Code.expect(1 + 1).to.equal(2);\n        done();\n    });\n\n    lab.test('another test that will not be executed', (done) =>  {\n\n        done();\n    });\n});\n```\n\nThe `test()` callback has a `note()` function attached to it that can be used to\nattach notes to the test case.  These notes are included in the console reporter\nat the end of the output.  For example, if you would like to add a note with the\ncurrent time, your test case may look like the following:\n\n```javascript\nlab.test('attaches notes', (done) => {\n\n    Code.expect(1 + 1).to.equal(2);\n    done.note(`The current time is ${Date.now()}`);\n    done();\n});\n```\n\nMultiple notes can be appended for the same test case by simply calling `note()`\nrepeatedly.\n\n\nThe `test()` callback provides a second `onCleanup` argument which is a function used to register a runtime cleanup function\nto be executed after the test completed. The cleanup function will execute even in the event of a timeout. Note that the cleanup\nfunction will be executed as-is without any timers and if it fails to call it's `next` argument, the runner will freeze.\n\n```javascript\nlab.test('cleanups after test', (done, onCleanup) => {\n\n    onCleanup((next) => {\n\n        cleanup_logic();\n        return next();\n    });\n\n    Code.expect(1 + 1).to.equal(2);\n    done();\n});\n```\n\nAdditionally, `test()` options support a `plan` setting to specify the expected number of assertions for your test to execute. This\nsetting should only be used with an assertion library that supports a `count()` function, like [`code`](http://npmjs.com/package/code).\n*`plan` may not work with parallel test executions*\n\n```javascript\nlab.experiment('my plan', () => {\n\n    lab.test('only a single assertion executes', { plan: 1 }, (done) => {\n\n        Code.expect(1 + 1).to.equal(2);\n        done();\n    });\n});\n```\n\n`before()`, `after()`, `beforeEach()`, `afterEach()` accept an optional `options` argument which must be an object with the following optional keys:\n- `timeout` -  set a specific timeout in milliseconds. Disabled by default or the value of `-M`.\n\n```javascript\nlab.experiment('math', { timeout: 1000 }, () => {\n\n    lab.before({ timeout: 500 }, (done) =>  {\n\n        doSomething();\n        done();\n    });\n\n    lab.test('returns true when 1 + 1 equals 2', { parallel: true }, (done) =>  {\n\n        Code.expect(1 + 1).to.equal(2);\n        done();\n    });\n});\n```\n\nThe `script([options])` method takes an optional `options` argument where `options` is an object with the following optional keys:\n- `schedule` - if `false`, an automatic execution of the script is disabled. Automatic execution allows running lab test scripts directly\n  with node without having to use the cli (e.g. `node test/script.js`). When using **lab** programmatically, this behavior is undesired and\n  can be turned off by setting `schedule` to `false`. If you need to see the output with schedule disabled you should set `output` to `process.stdout`.  Defaults to `true`.\n- `cli` - allows setting command line options within the script. Note that the last script file loaded wins and usage of this is recommended\n  only for temporarily changing the execution of tests. This option is useful for code working with an automatic test engine that run tests\n  on commits. Setting this option has no effect when not using the CLI runner. For example setting `cli` to `{ ids: [1] }` will only execute\n  the first test loaded.\n\nTo make **lab** look like BDD:\n```javascript\nconst Code = require('code');\nconst Lab = require('lab');\nconst lab = exports.lab = Lab.script();\n\nconst describe = lab.describe;\nconst it = lab.it;\nconst before = lab.before;\nconst after = lab.after;\nconst expect = Code.expect;\n\ndescribe('math', () => {\n\n    before((done) => {\n\n        done();\n    });\n\n    after((done) => {\n\n        done();\n    });\n\n    it('returns true when 1 + 1 equals 2', (done) => {\n\n        expect(1 + 1).to.equal(2);\n        done();\n    });\n});\n```\n\nTo make **lab** look like TDD:\n```javascript\nconst Code = require('code');\nconst Lab = require('lab');\nconst lab = exports.lab = Lab.script();\n\nconst suite = lab.suite;\nconst test = lab.test;\nconst expect = Code.expect;\n\nsuite('math', () => {\n\n    test('returns true when 1 + 1 equals 2', (done) => {\n\n        expect(1 + 1).to.equal(2);\n        done();\n    });\n});\n```\n\nTo use source transforms, you must specify a file with the `-T` command line option that tells Lab how to do the transformation. You can specify many extensions with different transform functions such as `.coffee` or `.jsx`. A sample file using the babel transpiler and the CoffeeScript compiler could look like:\n\n```javascript\nconst Babel = require('babel-core');\nconst Coffee = require('coffee-script');\nconst Btoa = require('btoa');\n\nmodule.exports = [\n    { ext: '.js', transform: (content, filename) => {\n\n        // Make sure to only transform your code or the dependencies you want\n        if (filename.indexOf('node_modules') === -1) {\n            const result = Babel.transform(content, { sourceMap: 'inline', filename, sourceFileName: filename });\n            return result.code;\n        }\n\n        return content;\n    } },\n    { ext: '.coffee', transform: (content, filename) => {\n\n        // Again, make sure to only transform your code or the dependencies you want\n        if (filename.indexOf('node_modules') === -1) {\n            const result = Coffee.compile(content, {\n                sourceMap: true,\n                inline: true,\n                sourceRoot: '/',\n                sourceFiles: [filename]\n            });\n\n            // append source map to end of compiled JS\n            return result.js +\n              '\\n//# sourceMappingURL=data:application/json;base64,' +\n              Btoa(unescape(encodeURIComponent(result.v3SourceMap)));\n        }\n\n        return content;\n    } }\n];\n```\n\nSometimes you want to disable code coverage for specific lines, and have the coverage report omit them entirely. To do so, use the `$lab:coverage:(off|on)$` comments. For example:\n```javascript\n// There is no way to cover this in node 0.10\n/* $lab:coverage:off$ */\nif (typeof value === 'symbol') {\n    return '[' + value.toString() + ']';\n}\n/* $lab:coverage:on$ */\n\n```\n\n## `.labrc.js` file\n\n**lab** supports a `.labrc.js` configuration file for centralizing lab settings.  \nThe `.labrc.js` file can be located in the current working directory, any\ndirectory that is the parent of the current working directory, or in the user's\nhome directory.  The `.labrc.js` file needs to be able to be required by\nNode.js.  Therefore, either format it as a JSON file or with a `module.exports`\nthat exports an object with the keys that are the settings.  \n\n\nBelow is an example of a `.labrc.js` file to enable linting and test coverage checking:\n\n```js\nmodule.exports = {\n    coverage: true,\n    threshold: 90,\n    lint: true\n};\n```\n\n### `.labrc.js` setting precedent\n\nThe `.labrc.js` file will override the **lab** default settings. Any options passed\nto the **lab** runner will override the settings found in `.labrc.js`.  For example,\nassume you have the following `.labrc.js` file:\n\n```js\nmodule.exports = {\n    coverage: true,\n    threshold: 100\n};\n```\n\nIf you need to reduce the coverage threshold for a single run, you can execute\n**lab** as follows:\n\n```sh\nlab -t 80\n```\n\n### `.labrc.js` available settings\n\nThe `.labrc.js` file supports configuration keys that are named with the long name\nof the command line settings.  Therefore, if you need to specify an assert\nlibrary, you would export a key named \"assert\" with the desired value.\n\n\n## Extending the linter\n\n**lab** uses a shareable [eslint](http://eslint.org/) config, and a plugin containing several **hapi** specific linting rules. If you want to extend the default linter you must:\n\n1. Add `eslint-plugin-hapi` and `eslint-config-hapi` as dependencies in your `package.json`. You must add both the plugin and the config because eslint treats them as peer dependencies. For more background, see [eslint/eslint#3458](https://github.com/eslint/eslint/issues/3458) and [eslint/eslint#2518](https://github.com/eslint/eslint/issues/2518).\n\n2. In your project's eslint configuration, add `\"extends\": \"eslint-config-hapi\"`. eslint will automatically infer the `eslint-config-`, so technically you can just write `\"extends\": \"hapi\"`.\n\nYour project's eslint configuration will now extend the default **lab** configuration.\n\n## Ignoring files in linting\n\nSince [eslint](http://eslint.org/) is used to lint, you can create an `.eslintignore` containing paths to be ignored:\n```\nnode_modules/*\n**/vendor/*.js\n```\n\n## Only run linting\n\nIn order to run linting and not to execute tests you can combine the `dry` run\nflag with the `lint` flag.\n\n```\nlab -dL\n```\n\n## Running a custom linter\n\nIf you would like to run a different linter, or even a custom version of eslint you should\npass the `-n` or `--linter` argument with the path to the lint runner.  For example,\nif you plan to use jslint, you can install `lab-jslint` then pass `--linter node_modules/lab-jslint`.\n\n## Integration with an assertion library\n\nUsing the `--assert` argument allows you to integrate Lab with your favorite assertion library. It works by\nrequiring the imported assertion library via the `Lab.assertions` property. Here is an example\nusing `--assert code`:\n\n```js\n// Testing shortcuts\nconst expect = Lab.assertions.expect;\nconst fail = Lab.assertions.fail;\n\n\ndescribe('expectation', () => {\n\n    it('should be able to expect', (done) => {\n\n        expect(true).to.be.true();\n\n        done();\n    });\n\n    it('should be able to fail (This test should fail)', (done) => {\n\n        fail('Should fail');\n\n        done();\n    });\n\n});\n```\n\nIf you use the [Code](https://github.com/hapijs/code) assertion library Lab will let you know if you\nhave any missing assertions. An example of this is:\n\n```js\ndescribe('expectation', () => {\n\n    it('Test should pass but get marked as having a missing expectation', (done) => {\n\n        // Invalid and missing assertion - false is a method, not a property!\n        // This test will pass.\n        expect(true).to.be.false;\n\n        done();\n    });\n\n});\n```\n\nThis is an invalid test but it will pass as the `.false` assertion was not actually called. Lab will report the\nnumber of incomplete assertions, their location in your code and return a failure of the tests.\n\n## Debuggers\n\n**lab** can be started with the option `--inspect` which will run it with the V8 Inspector.\n\nThis debugger can be accessed using the URL that is printed in the console, or used in association with a few Chrome extensions ([Node.js V8 Inspector](https://chrome.google.com/webstore/detail/nodejs-v8-inspector/lfnddfpljnhbneopljflpombpnkfhggl), [NIM](https://chrome.google.com/webstore/detail/nim-node-inspector-manage/gnhhdgbaldcilmgcpfddgdbkhjohddkj/related), etc).\n\nAs you may know, if your tests are associated with the command `npm test`, you can already run `npm test -- --inspect` to run it with the inspector and avoid creating another command. If you want to listen on a specific port for the inspector, pass `--inspect={port}`.\n\n**lab** also has automatic support for the [WebStorm](https://www.jetbrains.com/webstorm/) debugger, just start a normal debugging session on your npm test script.\n\n## Best practices\n\n- Install **lab** as a global module:\n\n```bash\n$ npm install -g lab\n```\n\n- Add lab as a dev dependency to your project's `package.json` along with a `test` script:\n\n```json\n{\n  \"name\": \"example\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n  },\n  \"devDependencies\": {\n    \"lab\": \"5.x.x\"\n  },\n  \"scripts\": {\n    \"test\": \"lab -t 100\",\n    \"test-cov-html\": \"lab -r html -o coverage.html\"\n  },\n  \"licenses\": [\n    {\n      \"type\": \"BSD\",\n      \"url\": \"http://github.com/hapijs/lab/raw/master/LICENSE\"\n    }\n  ]\n}\n```\n\nNote that `npm test` will execute **lab** with the `-t 100` option which will\nrequire 100% code coverage. Run `npm run test-cov-html` and check the `coverage.html`\nfile to figure out where coverage is lacking. When coverage is below the threshold,\nthe CLI will exit with code `1` and will result in an npm Error message.\n\n- Run your tests with\n\n```bash\n$ npm test\n```\n\n## Multiple Reporters\n\nMultiple reporters can be specified by providing multiple reporter options.\n\n```bash\n$ lab -r console -r html\n```\n\nIf any output `-o` is provided, they must match the same number of provided reporter options. The reporters would be paired with an output based on\nthe order in which they were supplied. When specifying multiple outputs, use `stdout` to send a particular reporter to stdout.\n\n```bash\n$ lab -r console -o stdout -r html -o coverage.html -r lcov -o lcov.info -r json -o data.json\n```\n\nMultiple reporters of the same kind are also supported.\n\n```bash\n$ lab -r console -o stdout -r console -o console.log\n```\n\n## Custom Reporters\n\nIf the value passed for `reporter` isn't included with Lab, it is loaded from the filesystem.\nIf the string starts with a period (`'./custom-reporter'`), it will be loaded relative to the current working directory.\nIf it doesn't start with a period (`'custom-reporter'`), it will be loaded from the `node_modules` directory, just like any module installed using `npm install`.\n\nReporters must be a class with the following methods: `start`, `test` and `end`. `options` are passed to the class constructor upon initialization.\n\nSee the [json reporter](lib/reporters/json.js) for a good starting point.\n\n## Excluding paths from coverage reporting\n\nThe `--coverage-exclude` argument can be repeated multiple times in order to add multiple paths to exclude.  By default the `node_modules` and `test` directories are excluded.  If you want to exclude those as well as a directory named `public` you can run lab as follows:\n\n```bash\nlab -c --coverage-exclude test --coverage-exclude node_modules --coverage-exclude public\n```\n\n## Acknowledgements\n\n**lab** initial code borrowed heavily from [mocha](http://mochajs.org/), including the actual code used to render\nthe coverage report into HTML. **lab** coverage code was originally adapted from [blanket](https://github.com/alex-seville/blanket)\nwhich in turn uses [falafel](https://github.com/substack/node-falafel).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/lab.git"
  },
  "scripts": {
    "lint": "node ./bin/_lab -d -f -L",
    "lint-md": "eslint --config hapi --rule 'strict: 0, eol-last: 0' --plugin markdown --ext md  .",
    "posttest": "npm run lint-md",
    "test": "node ./bin/_lab -fL -t 100 -m 3000",
    "test-cov-html": "node ./bin/_lab -fL -r html -m 3000 -o coverage.html"
  },
  "version": "13.1.0"
}
