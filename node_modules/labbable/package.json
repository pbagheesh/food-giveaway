{
  "_args": [
    [
      {
        "raw": "labbable@2.x.x",
        "scope": null,
        "escapedName": "labbable",
        "name": "labbable",
        "rawSpec": "2.x.x",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/prashant/Documents/Projects/pal/boilerplate-api"
    ]
  ],
  "_from": "labbable@>=2.0.0 <3.0.0",
  "_id": "labbable@2.1.1",
  "_inCache": true,
  "_location": "/labbable",
  "_nodeVersion": "6.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/labbable-2.1.1.tgz_1491848396318_0.5983003061264753"
  },
  "_npmUser": {
    "name": "devinivy",
    "email": "devin@bigroomstudios.com"
  },
  "_npmVersion": "3.10.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "labbable@2.x.x",
    "scope": null,
    "escapedName": "labbable",
    "name": "labbable",
    "rawSpec": "2.x.x",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/labbable/-/labbable-2.1.1.tgz",
  "_shasum": "e63b755c4088b4e332b490b1bac8120c8354d9dc",
  "_shrinkwrap": null,
  "_spec": "labbable@2.x.x",
  "_where": "/Users/prashant/Documents/Projects/pal/boilerplate-api",
  "author": {
    "name": "Devin Ivy",
    "email": "devin@bigroomstudios.com"
  },
  "bugs": {
    "url": "https://github.com/devinivy/labbable/issues"
  },
  "dependencies": {},
  "description": "No-fuss hapi server testing",
  "devDependencies": {
    "code": "4.x.x",
    "coveralls": "2.x.x",
    "hapi": "16.x.x",
    "lab": "13.x.x"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "e63b755c4088b4e332b490b1bac8120c8354d9dc",
    "tarball": "https://registry.npmjs.org/labbable/-/labbable-2.1.1.tgz"
  },
  "gitHead": "733d85a7e0571f32b84f337b6fad3fbb6cead3ce",
  "homepage": "https://github.com/devinivy/labbable#readme",
  "keywords": [
    "hapi",
    "server",
    "test",
    "testing",
    "utility"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "devinivy",
      "email": "devin@bigroomstudios.com"
    }
  ],
  "name": "labbable",
  "optionalDependencies": {},
  "peerDependencies": {
    "hapi": ">=10 <17"
  },
  "readme": "# labbable\n\nNo-fuss hapi server testing\n\n[![Build Status](https://travis-ci.org/devinivy/labbable.svg?branch=master)](https://travis-ci.org/devinivy/labbable) [![Coverage Status](https://coveralls.io/repos/devinivy/labbable/badge.svg?branch=master&service=github)](https://coveralls.io/github/devinivy/labbable?branch=master)\n\nIt can be a pain to get your hapi server into your tests, especially when using otherwise wonderful tools such as **[glue](https://github.com/hapijs/glue)**.  Labbable makes this process very simple, and encourages the best practice of testing an initialized (but not started) hapi server.\n\n##### Why initialize the server for tests?\nPlugin dependencies are only enforced at the time of [server initialization](https://github.com/hapijs/hapi/blob/master/API.md#serverinitializecallback).  This means code that relies on a plugin being present (typically by the `after` callback of [`server.dependency(deps, after)`](https://github.com/hapijs/hapi/blob/master/API.md#serverdependencydependencies-after)) will only run during initialization.  And if there are any dependencies missing, those errors will surface only during initialization.  Your server's caches will also be started and `onPreStart` server extensions will run.\n\nShould you so desire, labbable can also pass an uninitialized server into your tests using options for [`labbable.ready()`](#labbablereadyoptions-cb).\n\n## Usage\n\n### Directly (as plugin)\nIn this case the server is immediately available and can be placed in `module.exports`.  Registering the `Labbable.plugin` hapi plugin adds a server decoration `server.labbableReady()` that can be used in a test to guarantee the server is initialized.\n\n#### `server.js`\n```js\nconst Hapi = require('hapi');\nconst Labbable = require('labbable');\n\n// Step 1.\n// Simply export your server\nconst server = module.exports = new Hapi.Server();\n\nserver.connection();\n\n// Step 2.\n// Register the labbable plugin plus any others\nserver.register([Labbable.plugin], (err) => {\n\n    if (err) {\n        throw err;\n    }\n\n    // Step 3.\n    // Initialize your server\n    server.initialize((err) => {\n\n        if (err) {\n            throw err;\n        }\n\n        // Don't continue to start server if module\n        // is being require()'d (likely in a test)\n        if (module.parent) {\n            return;\n        }\n\n        server.start((err) => {\n\n            if (err) {\n                throw err;\n            }\n\n            console.log('Server started');\n        });\n    });\n});\n```\n\n#### `test/index.js`\n```js\nconst Code = require('code');\nconst Lab = require('lab');\nconst MyServer = require('../server.js');\n\nconst lab = exports.lab = Lab.script();\nconst describe = lab.describe;\nconst before = lab.before;\nconst it = lab.it;\nconst expect = Code.expect;\n\ndescribe('My server', () => {\n\n    const server = MyServer;\n\n    before((done) => {\n\n        // Callback fires once the server is initialized\n        // or immediately if the server is already initialized\n        server.labbableReady((err) => {\n\n            if (err) {\n                return done(err);\n            }\n\n            return done();\n        });\n    });\n\n    // server is now available to be tested\n    it('initializes.', (done) => {\n\n        // server.isInitialized() can be used to check the server's init state\n        expect(server.isInitialized()).to.equal(true);\n        done();\n    });\n});\n```\n\n### With glue\nIn this case the server is composed by **[glue](https://github.com/hapijs/glue)** then made available asynchronously, so it can't be exported as in the previous example.\n\nInstead we export an instance `lababble` of Labbable, then call `labbable.using(server)` as soon as the server is available.  The method `labbable.ready()`\n can then be used in a test to get a hold of `server` once it's initialized.\n\n#### `server.js`\n```js\nconst Glue = require('glue');\nconst Labbable = require('labbable');\n\n// Step 1.\n// Make an instance of Labbable\n// to which we can pass the server\nconst labbable = module.exports = new Labbable();\nconst manifest = {/* ... */};\n\nGlue.compose(manifest, (err, server) => {\n\n    if (err) {\n        throw err;\n    }\n\n    // Step 2.\n    // Show the server to our instance of labbable\n    labbable.using(server);\n\n    // Step 3.\n    // Initialize your server\n    server.initialize((err) => {\n\n        if (err) {\n            throw err;\n        }\n\n        // Don't continue to start server if module\n        // is being require()'d (likely in a test)\n        if (module.parent) {\n            return;\n        }\n\n        server.start((err) => {\n\n            if (err) {\n                throw err;\n            }\n\n            console.log('Server started');\n        });\n    });\n});\n```\n\n#### `test/index.js`\n```js\nconst Code = require('code');\nconst Lab = require('lab');\nconst LabbableServer = require('../server.js');\n\nconst lab = exports.lab = Lab.script();\nconst describe = lab.describe;\nconst before = lab.before;\nconst it = lab.it;\nconst expect = Code.expect;\n\ndescribe('My server', () => {\n\n    let server;\n\n    before((done) => {\n\n        // Callback fires once the server is initialized\n        // or immediately if the server is already initialized\n        LabbableServer.ready((err, srv) => {\n\n            if (err) {\n                return done(err);\n            }\n\n            server = srv;\n\n            return done();\n        });\n    });\n\n    // server is now available to be tested\n    it('initializes.', (done) => {\n\n        expect(server).to.exist();\n\n        // isInitialized() can be used to check the server's init state\n        expect(LabbableServer.isInitialized()).to.equal(true);\n        done();\n    });\n});\n```\n\n## API\n\n### `Labbable`\nThe `Labbable` object is the container used to conveniently obtain a hapi server.\n\n#### `new Labbable([options])`\nCreates a new `Labbable` object.\n  - `options` - an optional object with the following,\n    - `server` - a hapi server.  When passed, the labbable instance is immediately made aware of `server`.\n    - `defaultTimeout` - the number of milliseconds to wait (for the `server` to be made initialized and/or available) until a timeout error is raised.  When set to `0` or `false` no timeout will be set. Defaults to `2000` (2 seconds).\n\n#### `labbable.using(server)`\n  - `server` - a hapi server.  Makes the labbable instance aware of `server`.\n\nThe labbable instance should be made aware of the hapi server as soon as possible.  If the labbable instance is already aware of a server, this will throw an error.\n\n#### `labbable.ready([options], [cb])`\n  - `options` - an optional object with the following,\n    - `immediate` - a boolean that when `true` passes along the `server` as soon as it is available to `labbable` (typically by calling `labbable.using(server)`).  By default, labbable will wait until the server is both available and also initialized.\n    - `timeout` - a number in milliseconds, to override the `defaultTimeout` option specified in the constructor.\n  - `cb` - a callback with the signature `cb(err, srv)`,\n    - `err` - an error (such as a timeout).\n    - `srv` - the hapi server instance that has been made initialized and/or available.\n\nWhen `cb` is not passed `labbable.ready()` returns a `Promise` that resolves with `srv` as described above, or rejects with `err` as described above.\n\n#### `labbable.isInitialized()`\nReturns `true` when `labbable` is aware of a hapi server (typically by calling `labbable.using(server)`) that has been initialized, and `false` otherwise.\n\n\n### `Labbable.plugin`\nThis is a hapi plugin.  It gives the server two server decorations that provide identical functionality to [an instance of labbable](#new-labbableserver).\n\n#### `server.labbableReady([options], [cb])`\nThis is identical to [`labbable.ready()`](#labbablereadyoptions-cb), where the root server is already made available to `labbable`.\n\n#### `server.isInitialized()`\nReturns `true` if `server` is initialized and `false` otherwise.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/devinivy/labbable.git"
  },
  "scripts": {
    "coveralls": "lab -r lcov | coveralls",
    "test": "lab -a code -t 100 -L"
  },
  "version": "2.1.1"
}
