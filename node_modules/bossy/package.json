{
  "_args": [
    [
      {
        "raw": "bossy@3.x.x",
        "scope": null,
        "escapedName": "bossy",
        "name": "bossy",
        "rawSpec": "3.x.x",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/Users/prashant/Documents/Projects/pal/boilerplate-api/node_modules/lab"
    ]
  ],
  "_from": "bossy@>=3.0.0 <4.0.0",
  "_id": "bossy@3.0.4",
  "_inCache": true,
  "_location": "/bossy",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/bossy-3.0.4.tgz_1483036981201_0.8139927128795534"
  },
  "_npmUser": {
    "name": "sericaia",
    "email": "alunassertiva@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bossy@3.x.x",
    "scope": null,
    "escapedName": "bossy",
    "name": "bossy",
    "rawSpec": "3.x.x",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/lab"
  ],
  "_resolved": "https://registry.npmjs.org/bossy/-/bossy-3.0.4.tgz",
  "_shasum": "f9ae9f26e81b41a318f4ee0d83686e4a5c2507b9",
  "_shrinkwrap": null,
  "_spec": "bossy@3.x.x",
  "_where": "/Users/prashant/Documents/Projects/pal/boilerplate-api/node_modules/lab",
  "bugs": {
    "url": "https://github.com/hapijs/bossy/issues"
  },
  "dependencies": {
    "hoek": "4.x.x",
    "joi": "10.x.x"
  },
  "description": "Command line options parser",
  "devDependencies": {
    "code": "4.x.x",
    "lab": "11.x.x"
  },
  "directories": {},
  "dist": {
    "shasum": "f9ae9f26e81b41a318f4ee0d83686e4a5c2507b9",
    "tarball": "https://registry.npmjs.org/bossy/-/bossy-3.0.4.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "1237cfc3d7ab8839d4035e36481ef276adb5a7b2",
  "homepage": "https://github.com/hapijs/bossy#readme",
  "keywords": [
    "cli",
    "command line",
    "options",
    "parser"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "arb",
      "email": "arbretz@gmail.com"
    },
    {
      "name": "hueniverse",
      "email": "eran@hammer.io"
    },
    {
      "name": "sericaia",
      "email": "alunassertiva@gmail.com"
    },
    {
      "name": "wyatt",
      "email": "wpreul@gmail.com"
    }
  ],
  "name": "bossy",
  "optionalDependencies": {},
  "readme": "# bossy\n\nCommand line options parser.\n\n[![Build Status](https://secure.travis-ci.org/hapijs/bossy.png)](http://travis-ci.org/hapijs/bossy)\n\nLead Maintainer - [sericaia](https://github.com/sericaia)\n\n\n## Usage\n\n```js\nvar Bossy = require('bossy');\n\nvar definition = {\n    h: {\n        description: 'Show help',\n        alias: 'help',\n        type: 'boolean'\n    },\n    n: {\n        description: 'Show your name',\n        alias: 'name'\n    }\n};\n\n\nvar args = Bossy.parse(definition);\n\nif (args instanceof Error) {\n    console.error(args.message);\n    return;\n}\n\nif (args.h || !args.n) {\n    console.log(Bossy.usage(definition, 'hello -n <name>'));\n    return;\n}\n\nconsole.log('Hello ' + args.n);\nconsole.log('Hello ' + args.name);\n```\n\n## Methods\n\n### `parse(definition, [options])`\n\nExpects a *bossy* definition object and will return the parsed `process.argv` arguments provided.  If there is an error\nthen the return value will be an `instanceof Error`.\n\nOptions accepts the following keys:\n* `argv` - custom argv array value.  Defaults to process.argv.\n\n### `usage(definition, [usage], [options])`\n\nFormat a  *bossy* definition object for display in the console.  If `usage` is provided the returned value will\ninclude the usage value formatted at the top of the message.\n\nOptions accepts the following keys:\n* `colors` - Determines if colors are enabled when formatting usage.  Defaults to whatever TTY supports.\n\n\n## Definition Object\n\nThe definition object should be structured with each object key representing the short form of an available command\nline argument.  Each argument key supports the following properties:\n\n* `alias`: A string or array of strings that can also be used as the argument name.  For example:\n```\nh: {\n    alias: 'help'\n}\n```\n\n* `type`: Available types are: `boolean`, `range`, `number`, `string`, and `help`.  Defaults to `string`.\n\n    `help` is a special type that allows the switch to be executed even though\n    other paramters are required. Use case is to display a help message and\n    quit. This will bypass all other errors, so be sure to capture it. It\n    behaves like a `boolean`.\n\n* `multiple` : Boolean to indicate if the same argument can be provided multiple times. If true, the parsed value\nwill always be an array of `type`'s. Defaults to `false`.\n\n* `description`: Description message that will be returned with usage information.\n\n* `require`: Boolean to indicate if the argument is required.  Defaults to `false`\n\n* `default`: A default value to assign to the argument if its not provided as an argument.\n\n* `valid`: A value or array of values that the argument is allowed to equal.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/bossy.git"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -a code -r html -o coverage.html"
  },
  "version": "3.0.4"
}
